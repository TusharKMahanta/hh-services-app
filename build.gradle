buildscript {
	dependencies {
		classpath "io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE"
	}
}

plugins {
	id 'java'
	id 'idea'
	id 'jvm-test-suite'
	id 'org.springframework.boot' version '3.1.3'
	id 'io.spring.dependency-management' version '1.1.3'
	id "io.freefair.lombok" version "8.4"
	id 'jacoco'
	id 'org.sonarqube' version "4.4.1.3373"
}
group = 'com.hh'
version = '0.0.1-SNAPSHOT'

apply from: 'sonarqube.gradle'

java {
	sourceCompatibility = '21'
}

repositories {
	mavenLocal()
	mavenCentral()
}

ext {
	set('mockitoVersion', "3.6.28")
}
dependencyManagement {
	imports {
		mavenBom 'io.micrometer:micrometer-tracing-bom:1.2.0'
	}
}

testing {
	suites {
		test {
			useJUnitJupiter()
		}
		integrationTest(JvmTestSuite) {
			dependencies {
				implementation project()
			}
		}
	}
}

jacocoTestReport {
	reports {
		xml.required = true
		html.required = true
		xml.outputLocation = file("${rootProject.projectDir}/build/reports/jacoco/test/jacocoTestReport.xml")
	}
	dependsOn test
}
jacocoTestCoverageVerification {
	violationRules {
		failOnViolation = true
		rule {
			limit {
				minimum = 0.00
			}
		}
	}
}

test.finalizedBy(project.tasks.jacocoTestReport)
jacocoTestReport.finalizedBy(project.tasks.jacocoTestCoverageVerification)

tasks.register('jacocoIntegrationTestReport', JacocoReport) {
	dependsOn['integrationTest']
	sourceDirectories.from = files(sourceSets.main.allSource.srcDirs)
	classDirectories.from = files(sourceSets.main.output)
	executionData.from = layout.buildDirectory.file("jacoco/integrationTest.exec").get().asFile
	reports {
		xml.required = true
		html.required = true
		html.outputLocation = layout.buildDirectory.dir('reports/jacoco/integrationTest/html')
		xml.outputLocation = file("${rootProject.projectDir}/build/reports/jacoco/integrationTest/jacocoIntegrationTestReport.xml")
	}
}

tasks.register('jacocoIntegrationTestCoverageVerification', JacocoCoverageVerification) {
	dependsOn['jacocoIntegrationTestReport']
	sourceDirectories.from = files(sourceSets.main.allSource.srcDirs)
	classDirectories.from = files(sourceSets.main.output)
	executionData.from = layout.buildDirectory.file("jacoco/integrationTest.exec").get().asFile
	violationRules {
		failOnViolation = true
		rule {
			limit {
				minimum = 0.1
			}
		}
	}
}

integrationTest.finalizedBy(project.tasks.jacocoIntegrationTestReport)
jacocoIntegrationTestReport.finalizedBy(project.tasks.jacocoIntegrationTestCoverageVerification)

configurations {
	integrationTestImplementation.extendsFrom(testImplementation)
	integrationTestRuntimeOnly.extendsFrom(testRuntimeOnly)
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'io.github.resilience4j:resilience4j-circuitbreaker:2.0.2'

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

	// for log tracing
	implementation 'io.micrometer:micrometer-tracing'
	implementation "io.micrometer:micrometer-tracing-bridge-brave"

	// for  health check
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	//for logback
	implementation 'ch.qos.logback:logback-core:1.4.14'
	implementation 'ch.qos.logback:logback-classic:1.4.12'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

